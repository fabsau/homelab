# Host Settings
ansible_home: "/root/vscode/homelab"
host_timezone: Europe/Berlin
docker_base_path: /docker
docker_network_base_subnet: "172.30"
default_file_permission_mode: "770"

# Security Settigns
security_ssh_permit_root_login: "yes" # TODO REMOVE!
fail2ban_bantime: 600
fail2ban_findtime: 600
fail2ban_maxretry: 5

# DNS Servers
dns_servers:
  - 192.168.100.20
  - 192.168.100.21

# Proxmox Backup Server
pbs_global_server:
  user: "{{ PROXMOX_BACKUP_USER }}"
  pass: "{{ PROXMOX_BACKUP_PASSWORD }}"
  host: 192.168.100.4:8007
  datastore: Backup
  fingerprint: "{{ PROXMOX_BACKUP_FINGERPRINT }}"

# Proxy Settings
socks5_proxy_port: 1080

# Traefik Whitelist
traefik_whitelist_ips:
  - 172.16.0.0/12
  - 192.168.251.0/24
  - 192.168.50.0/24
  - 192.168.100.0/24
  - 192.168.150.2/32
  - 100.64.0.2/24

# Logrotate Settings
logrotate_user: "{{ common_uid }}"
logrotate_group: "{{ common_gid }}"
logrotate_frequency: weekly
logrotate_keep: 14
logrotate_compress: yes
logrotate_entries:
  - name: traefik_access_log
    path: "{{ docker_base_path }}/traefik/data/log/access.log"
  - name: traefik_app_log
    path: "{{ docker_base_path }}/traefik/data/log/traefik.log"

# Adguard Sync Settings
adguardsync_schedule: "*/2 * * * *"
adguardsync_user: "{{ ADGUARD_USER }}"
adguardsync_password: "{{ ADGUARD_PASSWORD }}"

# Prometheus Settings
prometheus_global:
  scrape_interval: '1m'
  scrape_timeout: "1m"
prometheus_alert_rules_files:
  - "alerts.yml"

# Endpoints Hosts
endpoint_hosts:
  nas:
    ip:
      - "192.168.100.3"
    open_ports:
      - 22
      - 80
      - 443
    docker_connection:
      type: "socket"
      path: "/var/run/docker.sock"
      id: 1
    uptimekuma_basic_monitoring: true
    uptimekuma_http_monitoring: true
    uptimekuma_container_monitoring: true
  dmz:
    ip:
      - "192.168.200.2"
    docker_connection:
      type: "tcp"
      path: "http://192.168.200.2:2375"
      id: 2
    uptimekuma_basic_monitoring: true
    uptimekuma_http_monitoring: true
    uptimekuma_container_monitoring: true
  lxc1:
    ip:
      - "192.168.100.20"
    dns: true
    uptimekuma_basic_monitoring: true
    uptimekuma_http_monitoring: true
    uptimekuma_container_monitoring: false
  lxc2:
    ip:
      - "192.168.100.21"
    dns: true
    uptimekuma_basic_monitoring: true
    uptimekuma_http_monitoring: true
    uptimekuma_container_monitoring: false 

endpoints:
  actualbudget:
    dmz: "budget.sauna.re"
  adguard:
    lxc1: "dns.oiba.de"
    lxc2: "dns2.oiba.de"
  adguardexporter:
    nas: "adguardexporter.oiba.de"
    prometheus_exporter: true
  alertmanager:
    nas: "alert.oiba.de"
    # dmz: "alert.sauna.re"
    prometheus_exporter: true
  authelia:
    dmz: "auth.sauna.re"
  baikal:
    dmz: "cal.sauna.re"
  bazarrexporter:
    nas: "bazarrexporter.oiba.de"
  backrest:
    nas: "backrest.oiba.de"
  bazarr:
    dmz: "bazarr.sauna.re"
  cadvisor:
    nas: "cadvisor.nas.oiba.de"
    dmz: "cadvisor.dmz.sauna.re"
    prometheus_exporter: true
  calibre:
    dmz: "calibre.sauna.re"
  calibre_web:
    dmz: "read.sauna.re"
  changedetection:
    nas: "change.oiba.de"
  ciscoswitch:
    nas: "switch.oiba.de"
    traefik_extra_server: true
  # codeserver:
  #   nas: "code.oiba.de"
  czkawka:
    nas: "files.oiba.de"
  demo-dhbwgpt:
    dmz: "demo-dhbwgpt.sauna.re"
  dockge:
    nas: "dockge.oiba.de"
    dmz: "dockge.dmz.sauna.re"
  donetick:
    dmz: "todo.sauna.re"
  ferdium:
    dmz: "ferdium.sauna.re"
  filebrowser:
    dmz: "files.sauna.re"
  fritzbox:
    nas: "fritz.oiba.de"
    traefik_extra_server: true
  ghost:
    dmz: "fabio.sauna.re"
    uptimekuma_settings:
      monitoring_disabled: false  # Explicitly enable monitoring (default is false)
      url_path: "/ghost"
      # URL Path Settings
      url_path: "/ghost"        # This will be appended to the base URL
      
      # Monitor Type Settings
      type: "http"              # Options: http, keyword, ping, port, dns, docker, etc.
      
      # General Settings
      description: "Ghost Blog"  # Monitor description
      tags: 
        - blog
        - production
      notifications:
        - telegram
        - discord
      interval: 60             # Heartbeat interval in seconds
      maxretries: 3           # Maximum number of retries
      retryInterval: 30       # Retry interval in seconds
      
      # HTTP/HTTPS Specific
      verify_ssl: true
      accepted_statuscodes:
        - "200-299"
      ignored_status_codes:
        - 403
      method: "GET"           # HTTP method (GET, POST, etc.)
      body: ""               # Request body
      body_encoding: "json"   # Options: json, xml, urlencoded
      headers:              # Custom headers
        User-Agent: "UptimeKuma"
        Authorization: "Bearer token123"
      
      # Keyword Monitor Settings
      keyword_monitoring:
        enabled: true
        keyword: "Ghost Blog"
        type: "keyword"     # Use this to switch to keyword monitoring
        invert: false       # Look for absence of keyword instead
      
      # Authentication
      authentication:
        enabled: false
        type: "basic"       # Options: basic, ntlm, mtls
        username: ""
        password: ""
        domain: ""          # For NTLM
        workstation: ""     # For NTLM
        
      # TLS/Certificate Settings
      tls:
        ca: ""             # Custom CA certificate
        cert: ""           # Client certificate
        key: ""            # Client key
        expiry_notification: true
        expiry_days:       # Notify when cert expires in X days
          - 7
          - 14
          - 30
      
      # Proxy Settings
      proxy:
        name: "eu-proxy"    # Name of predefined proxy
        custom:            # Or define custom proxy
          host: "proxy.example.com"
          port: 8080
          protocol: "http" # Options: http, https, socks, socks5, socks5h
          auth:
            username: ""
            password: ""
      
      # Docker Container Monitoring
      containers:
        ghost-mysql:
          docker_connection_host: "dmz"
          container_settings:
            notifications:
              - slack
            interval: 30
            retries: 5
            description: "Ghost MySQL Database"
            
      # Advanced HTTP Settings
      advanced_http:
        max_redirects: 10
        timeout: 30        # Request timeout in seconds
        host_header: ""    # Custom Host header
        resolution: "IPv4" # Force IPv4/IPv6 resolution
  gpt-researcher:
    dmz:
      - "research-api.sauna.re"
      - "research.sauna.re"
  grafana:
    nas: "grafana.oiba.de"
  headscale:
    dmz: "headscale.sauna.re"
    prometheus_settings:
      metrics_path: "/metrics"
    uptimekuma_settings:
      url_path: "/web"
  homeassistant:
    dmz: "home.sauna.re"
    traefik_extra_server: true
    prometheus_exporter: true
    prometheus_settings:
      metrics_path: "/api/prometheus"
      authorization:
        credentials: "{{ PROMETHEUS_HOMEASSISTANT_TOKEN }}"
  homer:
    dmz: "start.sauna.re"
  ihatemoney:
    dmz: "money.sauna.re"
  # inputforms:
  #   nas: "forms.oiba.de"
  it-tools:
    dmz: "tools.sauna.re"
  johanna-l#bt-fabio:
    dmz: "johanna-liebt-fabio.sauna.re"
  kasm:
    dmz:
      - "kasm.sauna.re"
      - "kasm-setup.sauna.re"
  librechat:
    dmz: "chat.sauna.re"
  librespeed:
    nas: "speed.nas.oiba.de"
    dmz: "speed.dmz.sauna.re"
  librespeedexporter:
    nas: "librespeedexporter.oiba.de"
    prometheus_exporter: true
    prometheus_settings:
      scrape_interval: "6h"
      scrape_timeout: "10m"
      metrics_path: "/probe"
      params:
        script: "librespeed"
  limesurvey:
    dmz: "survey.sauna.re"
  linkstack:
    dmz: "portal.sauna.re"
  litellm:
    dmz: "litellm.sauna.re"
  nexterm:
    nas: "ssh.oiba.de"
  nodeexporter:
    nas: "node.nas.oiba.de"
    dmz: "node.dmz.sauna.re"
    opn: "node.opn.oiba.de"
    home: "node.home.oiba.de"
    prometheus_exporter: true
  obsidian:
    dmz:
      - "obsidian-sync.sauna.re"
      - "notes.sauna.re"
  openmediavault:
    nas: "nas.oiba.de"
    traefik_extra_server: true
  openwebui:
   dmz: "chat2.sauna.re"
  opnsense:
    nas: "router.oiba.de"
    traefik_extra_server: true
  overseerr:
    dmz: "request.sauna.re"
  pairdrop:
    nas: "send.oiba.de"
  paperless:
    nas: "paper.oiba.de"
  photoprism:
    dmz: "photo.sauna.re"
  plausible:
    dmz: "data.sauna.re"
  plausibleexporter:
    nas: "plausibleexporter.oiba.de"
    prometheus_exporter: true
  plex:
    dmz: "watch.sauna.re"
  plexexporter:
    nas:
      - "plexexporter.oiba.de"
      - "plexexporter2.oiba.de"
      - "plexexporter3.oiba.de"
    prometheus_exporter: true
    prometheus_settings:
      scrape_interval: "30m"
      scrape_timeout: "10m"
  portainer:
    nas: "docker.oiba.de"
  prowlarr:
    dmz: "prowlarr.sauna.re"
  prowlarrexporter:
    nas: "prowlarrexporter.oiba.de"
    prometheus_exporter: true
  prometheus:
    nas: "prom.oiba.de"
    # dmz: "prom.sauna.re"
    prometheus_exporter: true
  proxmox:
    nas: "vm.oiba.de"
    traefik_extra_server: true
  proxbak:
    nas: "bak.oiba.de"
    traefik_extra_server: true
  proxmoxexporter:
    nas: "proxmoxexporter.oiba.de"
    target_replacement_url:
      - "vm.oiba.de:443"
    prometheus_exporter: true
    prometheus_settings:
      metrics_path: "/pve"
      params:
        module: "default"
        cluster: "1"
        node: "1"
      relabel_configs:
        - replacement: proxmoxexporter.oiba.de
  pbsexporter:
    nas: "pbsexporter.oiba.de"
    prometheus_exporter: true
  phpmyadmin:
    dmz: "pma.sauna.re"
  pyload:
    nas: "pyload.oiba.de"
  # qbittorrentexporter:
  #   nas: "qbittorrentexporter.oiba.de"
  #   prometheus_exporter: true
  radarr:
    dmz: "radarr.sauna.re"
  radarrexporter:
    nas: "radarrexporter.oiba.de"
    prometheus_exporter: true
    prometheus_settings:
      scrape_interval: "30m"
      scrape_timeout: "10m"
  # rancher:
  #   nas: "rancher.oiba.de"
  # rclone:
  #   nas: "rclone.oiba.de"
  #   dmz: "rclone.dmz.sauna.re"
  sabnzbd:
    dmz: "usenet.sauna.re"
  sabnzbdexporter:
    nas: "sabnzbdexporter.oiba.de"
    prometheus_exporter: true
  searxng:
    dmz: "searx.sauna.re"
    prometheus_exporter: true
    prometheus_settings:
      basic_auth:
        username: "{{ SEARXNG_PROMETHEUS_USER }}"
        password: "{{ SEARXNG_PROMETHEUS_PASSWORD }}"
  sonarr:
    dmz: "sonarr.sauna.re"
  sonarrexporter:
    nas: "sonarrexporter.oiba.de"
    prometheus_exporter: true
    prometheus_settings:
      scrape_interval: "30m"
      scrape_timeout: "10m"
  spotify:
    dmz:
      - "spotify-api.sauna.re"
      - "spotify.sauna.re"
  # syncthing:
  #   nas: "sync.oiba.de"
  # tandoorrecipes:
  #   dmz: "recipes.sauna.re"
    # prometheus_exporter: true
  tautulli:
    dmz: "tulli.sauna.re"
  tautulliexporter:
    nas: "tautulliexporter.oiba.de"
    prometheus_exporter: true
  timetagger:
    dmz: "time.sauna.re"
  torrent:
    dmz: "torrent.sauna.re"
  traefik:
    nas: "proxy.oiba.de"
    dmz: "proxy.dmz.sauna.re"
    prometheus_exporter: true
  unifi:
    nas: "unifi.oiba.de"
    uptimekuma_container:
        unifi-mongodb:
          docker_connection_host: "nas"
  unifiexporter:
    nas: "unifiexporter.oiba.de"
    prometheus_exporter: true
  uptimekuma:
    nas: "uptime.oiba.de"
    prometheus_exporter: true
    prometheus_settings:
      basic_auth:
        username: "{{ UPTIMEKUMA_USER }}"
        password: "{{ UPTIMEKUMA_PASSWORD }}"
  uptimekuma_saunaflix:
    dmz: "status.sauna.re"
  vacuum:
    nas: "vacuum.oiba.de"
    traefik_extra_server: true
  valetudo:
    nas: "valetudo.oiba.de"
  vaultwarden:
    dmz:
      - "bitwarden.sauna.re"
      - "bitwarden2.sauna.re"
  # vscode:
  #   nas: "code.oiba.de"
  wallos:
    nas: "wallos.oiba.de"
  watchtower:
    nas: "watchtower.oiba.de"
    dmz: "watchtower.dmz.sauna.re"
    prometheus_exporter: true
    prometheus_settings:
      metrics_path: "/v1/metrics"
      bearer_token: "{{ WATCHTOWER_HTTP_API_TOKEN }}"
  weddingshare:
    dmz: "franz.sauna.re"
  wizarr:
    dmz: "setup.sauna.re"
  xbackbone:
    dmz: "screen.sauna.re"

# # Base Packages to install
# base_packages:
#   - ncdu
#   - htop
#   - nload
#   - iotop
#   - nano
#   - cron
#   - git
#   - net-tools
#   - dnsutils
#   - iputils-ping
#   - curl
#   - nfs-common

# # NFS Settings
# nfs_mounts:
#   - nfs_server: 192.168.100.3
#     nfs_path: /Multimedia_Pictures
#     mount_point: /nfs/pictures
#     options: auto,nofail,noatime,nolock,intr,tcp,actimeo=1800

# User Settings
# ansible_username: ansible
# ansible_uid: "1000"
# ansible_authorized_keys:
#   - ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABgQDTyxApASDloZwHr0clLERRnBkalpRDO5FYVqsW2EBT6DlXH4btXbAgubnhEiY5YOp9GhI9qv+vRfUBoAx84qt9k8W1xTV7p2pg/HWKYm3V0edGt26BiLsRYLgbo3VUpdwVsKYTeJSShYkfOLUB0w5mYE+ZsWH47BUhGbe3Gyz+/aBETRPnS6iPBUDXlX1B41l54EtnPB4YLqkEi3wMigPdgU2oirwotPl/udJOf3hPxzEMPxc6Hf+iNN4ZkQXu+KyGKy7mjM6uSEvTChMxPzJgiZfLdU3/i0XvqYp0CL03ngwi2PHIKe/fswLIzQvyB258N52RaNt0waxIwKLgn63dXgGXgyw9yM9LhyOeDjVPWAjrQeq9g47WwClH4heTfpJkvOVcOArbqHbVR4KUuq/9dqFLZxELHcD+xvQab92y1ieZyhf5aeBQ9epggkzjAaCQNw8sms/6KK82CWR/yZngzAKkuSkch0VDv0ZHdCDiet9q+WPSVCVXkNN1xhzsnVM= ansible

# # Fabio Settings
# fabio_username: fabio
# fabio_uid: "500"
# fabio_authorized_keys:
#   - ssh-ed25519 AAAAC3NzaC1lZDI1NTE5AAAAICEgae2MlRld7wI2e9UuDb/AX0NEiH5jRc86D3mX1EgU fabio

# # Common ABC User Settings
# common_username: abc
# common_uid: "2000"
# common_gid: "2000"
# common_group: "abc"
# common_group_gid: "2000"

# # Admin Group
# admin_group: ansible
# admin_gid: "1000"

# # User Creation Settings
# users_user_create: true
# users_home_create: true
# users_home: /home
# users_home_mode: 700
# users_shell: "/bin/bash"
# users_authorized_keys_exclusive: true

# # Creation of Users
# users:
#   - username: "{{ ansible_username }}"
#     password: "{{ USER_ANSIBLE_PASSWORD }}"
#     state: present
#     primary_group: "{{ admin_group }}"
#     groups:
#       - "{{ admin_group }}"
#       - docker
#     uid: "{{ ansible_uid }}"
#     expires: -1
#     sudoer: yes
#     authorized_keys: "{{ ansible_authorized_keys }}"
#     lock: no
#   - username: "{{ fabio_username }}"
#     password: "{{ USER_FABIO_PASSWORD }}"
#     state: present
#     primary_group: "{{ admin_group }}"
#     groups:
#       - "{{ admin_group }}"
#       - docker
#     uid: "{{ fabio_uid }}"
#     expires: -1
#     sudoer: yes
#     authorized_keys: "{{ fabio_authorized_keys }}"
#     lock: no
#   - username: "{{ common_username }}"
#     password: "{{ USER_COMMON_PASSWORD }}"
#     state: present
#     primary_group: "{{ common_group }}"
#     groups:
#       - "{{ common_group }}"
#     uid: "{{ common_uid }}"
#     expires: -1
#     sudoer: no
#     authorized_keys: []
#     lock: no

# # Group Creation and User Assignment
# group_management:
#   - name: "{{ admin_group }}"
#     gid: "{{ admin_gid }}"
#     users: 
#       - "root"
#   - name: "{{ common_group }}"
#     gid: "{{ common_group_gid }}"
#     users:
#       - root
#       - "{{ ansible_username }}"
#       - "{{ fabio_username }}"

# # Removal of Users and Groups
# users_remove: []
# groups_remove: []

# security_ssh_allowed_groups:
#   - "{{ admin_group }}"
# security_ssh_allowed_users:
#   - "{{ ansible_username }}"
#   - "{{ fabio_username }}"
#   - root # TODO REMOVE!