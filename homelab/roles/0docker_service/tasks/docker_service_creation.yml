# /config/workspace/homelab/roles/0docker_service/tasks/docker_service_creation.yml

- name: "[{{ role_specific }}] Include role-specific vars"
  include_vars: "{{ ansible_home }}/roles/{{ role_specific }}/vars/main.yml"

- name: "[{{ role_specific }}] Create role directory"
  become: true
  file:
    path: "{{ docker_base_path }}/{{ docker_role_name }}"
    state: directory
    owner: "{{ common_username }}"
    group: "{{ common_group_gid }}"
    mode: "{{ default_file_permission_mode }}"

- name: "[{{ role_specific }}] Template Docker Compose file"
  template:
    src: "{{ ansible_home }}/roles/0docker_service/templates/docker-compose.yml.j2"
    dest: "{{ docker_base_path }}/{{ docker_role_name }}/docker-compose.yml"
    owner: "{{ common_username }}"
    group: "{{ common_group_gid }}"
    mode: "{{ default_file_permission_mode }}"
  become: true

- name: "[{{ role_specific }}] Find all templates"
  find:
    paths: "{{ ansible_home }}/roles/{{ docker_role_name }}/templates"
    patterns: "*.j2"
  delegate_to: localhost
  register: template_files

- name: "[{{ role_specific }}] Separate env and config files"
  set_fact:
    env_files: "{{ template_files.files | selectattr('path', 'search', '.env.j2$') | list }}"
    config_files: "{{ template_files.files | selectattr('path', 'search', '.j2$') | rejectattr('path', 'search', '.env.j2$') | list }}"

- name: "[{{ role_specific }}] Template env files"
  template:
    src: "{{ item.path }}"
    dest: "{{ docker_base_path }}/{{ docker_role_name }}/{{ item.path | basename | regex_replace('\\.j2$', '') }}"
    owner: "{{ common_username }}"
    group: "{{ common_group_gid }}"
    mode: "{{ default_file_permission_mode }}"
  become: true
  loop: "{{ env_files }}"
  when: env_files | length > 0

- name: "[{{ role_specific }}] Create config directory"
  file:
    path: "{{ docker_base_path }}/{{ docker_role_name }}/{{ docker_service_volume | default('config') }}"
    state: directory
    owner: "{{ common_username }}"
    group: "{{ common_group_gid }}"
    mode: "{{ default_file_permission_mode }}"
  become: true
  when: config_files | length > 0

- name: "[{{ role_specific }}] Template config files"
  template:
    src: "{{ item.path }}"
    dest: "{{ docker_base_path }}/{{ docker_role_name }}/{{ docker_service_volume | default('config') }}/{{ item.path | basename | regex_replace('\\.j2$', '') }}"
    owner: "{{ common_username }}"
    group: "{{ common_group_gid }}"
    mode: "{{ default_file_permission_mode }}"
  become: true
  loop: "{{ config_files }}"
  when: config_files | length > 0

- name: "[{{ role_specific }}] Check if role-specific tasks exist"
  stat:
    path: "{{ ansible_home }}/roles/{{ role_specific }}/tasks/main.yml"
  delegate_to: localhost
  register: role_tasks
  
- name: "[{{ role_specific }}] Include role-specific tasks"
  include_tasks: "{{ ansible_home }}/roles/{{ role_specific }}/tasks/main.yml"
  when: role_tasks.stat.exists

- name: "[{{ role_specific }}] Execute Docker Compose Up"
  command: "docker compose -f {{ docker_base_path }}/{{ docker_role_name }}/docker-compose.yml up -d"
  become: true
  register: docker_compose_up_result
  changed_when: "'Creating' in docker_compose_up_result.stdout or 'Starting' in docker_compose_up_result.stdout"

- name: "[{{ role_specific }}] Ensure services are running"
  command: "docker compose -f {{ docker_base_path }}/{{ docker_role_name }}/docker-compose.yml ps"
  become: true
  register: docker_compose_ps_result
  changed_when: false
  failed_when: "'Up' not in docker_compose_ps_result.stdout"