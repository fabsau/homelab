services:

{% for service in services %}
### {{ service.name | upper }} ###
  {{ service.name }}:
    image: {{ service.image }}
    container_name: {{ service.name }}
    hostname: {{ service.name }}
    restart: {{ service.restart | default('unless-stopped') }}
{% if service.command is defined and service.command %}
    command:
{% for cmd in service.command %}
      - {{ cmd }}
{% endfor %}
{% endif %}
{% if service.depends_on is defined and service.depends_on %}
    depends_on: 
{% for depend in service.depends_on %}
      - {{ depend }}
{% endfor %}
{% endif %}
{% if service.security_opt is not defined %}
    security_opt:
      - no-new-privileges
{% elif service.security_opt != 'default' %}
    security_opt:
{% for opt in service.security_opt %}
      - {{ opt }}
{% endfor %}
{% endif %}
{% if service.privileged is defined and service.privileged == true %}
    privileged: true
{% endif %}
{% if service.cap_drop is defined and service.cap_drop %}
    cap_drop: 
{% for cap in service.cap_drop %}
      - {{ cap }}
{% endfor %}
{% endif %}
{% if service.cap_add is defined and service.cap_add %}
    cap_add: 
{% for cap in service.cap_add %}
      - {{ cap }}
{% endfor %}
{% endif %}
{% if service.user is defined and service.user %}
    user: {{ service.user }}
{% endif %}
{% if service.cpus is defined and service.cpus %}
    cpus: {{ service.cpus }}
{% endif %}
{% if service.devices is defined and service.devices %}
    devices: 
{% for device in service.devices %}
      - {{ device | quote }}
{% endfor %}
{% endif %}
{% if service.sysctls is defined and service.sysctls %}
    sysctls: 
{% for sysctl in service.sysctls %}
      - {{ sysctl | quote }}
{% endfor %}
{% endif %}
{% if service.secrets is defined and service.secrets %}
    secrets: 
{% for secret in service.secrets %}
      - {{ secret }}
{% endfor %}
{% endif %}
{% if service.env_file is defined and service.env_file %}
    env_file: 
{% for env_file in service.env_file %}
      - {{ env_file }}
{% endfor %}
{% endif %}
{% if service.environment is defined and service.environment %}
    environment:
{% for env in service.environment %}
      - {{ env }}
{% endfor %}
{% endif %}
{% if service.ports is defined and service.ports %}
    ports:
{% for port in service.ports %}
{% if port is string %}
      - {{ port }}
{% else %}
      - target: {{ port.target }}
        published: {{ port.published }}
        protocol: {{ port.protocol }}
        mode: {{ port.mode }}
{% endif %}
{% endfor %}
{% endif %}
{% if service.network_mode is defined and service.network_mode %}
    network_mode: {{ service.network_mode }}
{% endif %}
{% if service.networks is defined and service.networks %}
    networks: 
{% for network in service.networks %}
      - {{ network }}
{% endfor %}
{% endif %}
{% if service.dns is defined and service.dns %}
    dns: 
{% for dns in service.dns %}
      - {{ dns }}
{% endfor %}
{% endif %}
{% if service.read_only is defined and service.read_only %}
    read_only: {{ service.read_only }}
{% endif %}
{% if service.volumes is defined and service.volumes %}
    volumes:
{% for volume in service.volumes %}
      - {{ volume }}
{% endfor %}
{% endif %}
    labels:
{% if service.traefik is defined %}
      - "traefik.enable=true"
      - "traefik.docker.network={{ service.networks[0] }}"
{% for traefik in service.traefik %}
{% set default_rule = "Host(`" ~ endpoints[role_specific][ansible_facts['hostname']] ~ "`)" %}
{% set traefik_rule = traefik.rule | default(default_rule) %}
{% if traefik.path is defined and traefik.path %}
{% set traefik_rule = traefik_rule ~ " && PathPrefix(`" ~ traefik.path ~ "`)" %}
{% endif %}
{% if traefik.http_redirection is not false %}
      - "traefik.http.routers.{{ traefik.name }}.entrypoints=http"
      - "traefik.http.routers.{{ traefik.name }}.rule={{ traefik_rule }}"
      - "traefik.http.routers.{{ traefik.name }}.middlewares=https-redirect@file"
      - "traefik.http.routers.{{ traefik.name }}.service={{ traefik.service | default(traefik.name ~ '-' ~ traefik.entrypoint) }}"
{% endif %}
      - "traefik.{{ traefik.protocol }}.routers.{{ traefik.name }}-{{ traefik.entrypoint }}.entrypoints={{ traefik.entrypoint }}"
      - "traefik.{{ traefik.protocol }}.routers.{{ traefik.name }}-{{ traefik.entrypoint }}.rule={{ traefik_rule }}"
{% if traefik.enable_tls is not false %}
      - "traefik.{{ traefik.protocol }}.routers.{{ traefik.name }}-{{ traefik.entrypoint }}.tls.certresolver=acme"
{% endif %}
{% if traefik.middlewares is defined and traefik.middlewares %}
      - "traefik.{{ traefik.protocol }}.routers.{{ traefik.name }}-{{ traefik.entrypoint }}.middlewares={{ traefik.middlewares }}"
{% endif %}
      - "traefik.{{ traefik.protocol }}.routers.{{ traefik.name }}-{{ traefik.entrypoint }}.service={{ traefik.service | default(traefik.name ~ '-' ~ traefik.entrypoint) }}"
{% if traefik.insecuretransport %}
      - "traefik.{{ traefik.protocol }}.services.{{ traefik.name }}-{{ traefik.entrypoint }}.loadbalancer.server.scheme=https"
      - "traefik.{{ traefik.protocol }}.services.{{ traefik.name }}-{{ traefik.entrypoint }}.loadBalancer.serversTransport=insecuretransport@file"
{% endif %}
{% if traefik.service_port is defined %}
      - "traefik.{{ traefik.protocol }}.services.{{ traefik.name }}-{{ traefik.entrypoint }}.loadbalancer.server.port={{ traefik.service_port }}"
{% endif %}
{% endfor %}
{% endif %}
{% if service.watchtower %}
      - "com.centurylinklabs.watchtower.enable=true"
{% endif %}

{% endfor %}


### NETWORKS ###
{% set unique_networks = [] %}
{% if services | selectattr("networks", "defined") | list | length > 0 %}
{% for service in services if service.networks is defined %}
{% for network in service.networks %}
{% if network not in unique_networks %}
{% set _ = unique_networks.append(network) %}
{% endif %}
{% endfor %}
{% endfor %}
networks:
{% for network in unique_networks %}
  {{ network }}:
    external: true
{% endfor %}
{% endif %}