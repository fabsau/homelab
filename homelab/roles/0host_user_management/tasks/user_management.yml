# /config/workspace/homelab/roles/0host_user_management/tasks/user_management.yml
- name: Set service name variable
  set_fact:
    ssh_service_name: "{{ 'ssh' if ansible_os_family == 'Debian' else 'sshd' }}"

- name: Create groups and assign gid
  group:
    name: "{{ item.name }}"
    gid: "{{ item.gid }}"
    state: present
  loop: "{{ group_management }}"
  become: true

- name: Create users and manage their attributes
  user:
    name: "{{ item.username }}"
    uid: "{{ item.uid | default(omit) }}"
    password: "{{ item.password | password_hash('sha512') }}"
    state: "{{ item.state | default('present') }}"
    group: "{{ item.primary_group }}"
    groups: "{{ item.groups | default(omit) }}"
    append: yes
    home: "{{ item.home | default(users_home + '/' + item.username) }}"
    createhome: "{{ item.home_create | default(users_home_create) }}"
    expires: "{{ item.expires | default(-1) }}"
    shell: "{{ item.shell | default(users_shell) }}"
  loop: "{{ users }}"
  become: true

- name: Add users to groups
  user:
    name: "{{ item.1 }}"
    groups: "{{ item.0.name }}"
    append: yes
  loop: "{{ group_management | subelements('users') }}"
  become: true

- name: Set home directory permissions for users
  file:
    path: "{{ item.home | default(users_home + '/' + item.username) }}"
    mode: "{{ item.home_mode | default(users_home_mode) }}"
  loop: "{{ users }}"
  become: true

- name: Add users to sudoers if specified
  template:
    src: sudoers.j2
    dest: "/etc/sudoers.d/{{ item.username }}"
    validate: 'visudo -cf %s'
  vars:
    user: "{{ item }}"
  loop: "{{ users }}"
  when: item.state == 'present' and item.sudoer == true
  become: true
  notify: Restart SSH Service

- name: Manage SSH keys for users
  authorized_key:
    user: "{{ item.0.username }}"
    state: "{{ item.0.state }}"
    key: "{{ item.1 }}"
    exclusive: "{{ item.0.ssh_keys_exclusive | default(users_authorized_keys_exclusive) }}"
  loop: "{{ users | subelements('authorized_keys') }}"
  when: item.0.authorized_keys is defined
  become: true
  become_user: "{{ item.0.username }}"

- name: Lock/unlock user account based on user.lock
  command: "{{ 'passwd -l ' + item.username if item.lock else 'passwd -u ' + item.username }}"
  loop: "{{ users }}"
  become: true
  when: item.lock is defined