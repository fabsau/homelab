---
- name: Set debug mode
  set_fact:
    docker_setup_debug: "{{ docker_setup_debug | default(true) | bool }}"

- name: Set default docker_roles
  set_fact:
    docker_roles: []

- name: Get networks and their configuration on the host
  shell: "docker network ls -q | xargs docker network inspect"
  register: network_inspect

- name: Set network info fact
  set_fact:
    network_info: "{{ network_inspect.stdout | from_json }}"

- name: Debug - Display on the host configured network information
  debug:
    msg: |
      Network Information:
      {% for network in network_info %}
      Network Name: {{ network.Name }}
      - Driver: {{ network.Driver }}
      - Subnet: {{ network.IPAM.Config[0].Subnet | default('No subnet') if network.IPAM.Config else 'No IPAM config' }}
      - Gateway: {{ network.IPAM.Config[0].Gateway | default('No gateway') if network.IPAM.Config else 'No IPAM config' }}
      - Containers: {{ network.Containers | default({}) | length }}
      {% endfor %}
  when: docker_setup_debug | bool
  tags: ['debug', 'docker_setup_debug']

- name: Debug - Show network names currently on the host active
  debug:
    msg: |
      Networks on host:
      {{ network_info | map(attribute='Name') | list | sort | join('\n') }}
  when: docker_setup_debug | bool
  tags: ['debug', 'docker_setup_debug']

- name: Display current taken subnets on the host
  debug:
    msg: |
      {% set taken = [] %}
      {% for network in network_info %}
      {% if network.IPAM.Config and network.IPAM.Config[0].Subnet is regex('^' + docker_network_base_subnet | regex_escape + '\\.(\\d+)\\.0/24$') %}
      {% set _ = taken.append(network.IPAM.Config[0].Subnet | regex_replace('^.*\\.(\\d+)\\.0/24$', '\\1') | int) %}
      {% endif %}
      {% endfor %}
      Taken subnets: {{ taken | sort }}
  when: docker_setup_debug | bool
  tags: ['debug', 'docker_setup_debug']

- name: Calculate available subnets
  debug:
    msg: |
      {% set taken = [] %}
      {% for network in network_info %}
      {% if network.IPAM.Config and network.IPAM.Config[0].Subnet is regex('^' + docker_network_base_subnet | regex_escape + '\\.(\\d+)\\.0/24$') %}
      {% set _ = taken.append(network.IPAM.Config[0].Subnet | regex_replace('^.*\\.(\\d+)\\.0/24$', '\\1') | int) %}
      {% endif %}
      {% endfor %}
      {% set all_subnets = range(1, 256) | list %}
      {% set available = all_subnets | difference(taken | sort) %}
      Available subnets: {{ available }}
      First available subnet: {{ available | first }}
  when: docker_setup_debug | bool
  tags: ['debug', 'docker_setup_debug']

- name: Load and parse host playbook
  set_fact:
    playbook_content: "{{ lookup('file', ansible_home + '/playbooks/docker_services/' + inventory_hostname + '.yml') | from_yaml }}"

- name: Debug - Print playbook content
  debug:
    msg: "Loaded playbook content: {{ playbook_content }}"
  when: docker_setup_debug | bool

- name: Extract docker service roles from playbook for desired network configuration
  set_fact:
    docker_roles: "{{ playbook_content[0].roles | selectattr('role', 'defined') | selectattr('role', 'eq', '0docker_service') | map(attribute='vars.docker_service_roles') | first }}"

- name: Extract desired networks configuration
  set_fact:
    docker_networks_config: "{{ playbook_content[0].roles | selectattr('role', 'defined') | selectattr('role', 'eq', '0docker_service') | map(attribute='vars.docker_networks') | first | default({}) }}"

- name: Generate desired network list
  set_fact:
    all_networks: >-
      {%- set networks = {} -%}
      {%- if docker_networks_config is mapping -%}
      {%- for net_name, net_config in docker_networks_config.items() -%}
      {%- set _ = networks.update({net_name: net_config}) -%}
      {%- endfor -%}
      {%- endif -%}
      {%- set services_in_networks = [] -%}
      {%- if docker_networks_config is mapping -%}
      {%- for net in docker_networks_config.values() -%}
      {%- if net.services is defined -%}
      {%- for service in net.services -%}
      {%- set _ = services_in_networks.append(service) -%}
      {%- endfor -%}
      {%- endif -%}
      {%- endfor -%}
      {%- endif -%}
      {%- for role in docker_roles -%}
      {%- if role not in services_in_networks -%}
      {%- set _ = networks.update({role: {'services': [role]}}) -%}
      {%- endif -%}
      {%- endfor -%}
      {{ networks }}

- name: Debug - Print complete desired network list
  debug:
    msg: "Complete network list: {{ all_networks }}"
  when: docker_setup_debug | bool

- name: Set traefik network fact
  set_fact:
    traefik_networks: "{{ all_networks.keys() | list }}"
  tags: ['traefik']

- name: Debug - Show missing networks between desired and configured networks
  debug:
    msg: "Missing networks: {{ (all_networks.keys() | list) | difference(network_info | map(attribute='Name') | list) }}"
  when: docker_setup_debug | bool
  tags: ['debug', 'docker_setup_debug']

- name: Calculate subnet assignments for new networks
  debug:
    msg: |
      Missing networks and their subnet assignments:
      {% set taken = [] %}
      {% for network in network_info %}
      {% if network.IPAM.Config and network.IPAM.Config[0].Subnet is regex('^' + docker_network_base_subnet | regex_escape + '\\.(\\d+)\\.0/24$') %}
      {% set _ = taken.append(network.IPAM.Config[0].Subnet | regex_replace('^.*\\.(\\d+)\\.0/24$', '\\1') | int) %}
      {% endif %}
      {% endfor %}
      {% for network in (all_networks.keys() | list) | difference(network_info | map(attribute='Name') | list) | sort %}
      - {{ network }}: {{ docker_network_base_subnet }}.{{ range(1, 256) | list | difference(taken | sort) | first }}.0/24
      {% endfor %}
  when: docker_setup_debug | bool
  tags: ['debug', 'docker_setup_debug']

- name: Set subnet calculation facts
  set_fact:
    taken_subnets: >-
      {%- set t = [] -%}
      {%- for net in network_info -%}
        {%- if net.IPAM.Config and net.IPAM.Config[0].Subnet is regex('^' + docker_network_base_subnet | regex_escape + '\\.(\\d+)\\.0/24$') -%}
          {%- set _ = t.append(net.IPAM.Config[0].Subnet | regex_replace('^.*\\.(\\d+)\\.0/24$', '\\1') | int) -%}
        {%- endif -%}
      {%- endfor -%}
      {{ t }}
    available_subnets: "{{ range(1, 256) | list | difference(taken_subnets | default([]) | sort) }}"
    networks_to_create: "{{ (all_networks.keys() | list) | difference(network_info | map(attribute='Name') | list) }}"

- name: Create required Docker networks
  docker_network:
    name: "{{ item }}"
    driver: bridge
    ipam_config:
      - subnet: "{{ docker_network_base_subnet }}.{{ (range(1, 256) | list | difference(taken_subnets | sort))[idx] }}.0/24"
        gateway: "{{ docker_network_base_subnet }}.{{ (range(1, 256) | list | difference(taken_subnets | sort))[idx] }}.1"
  loop: "{{ (all_networks.keys() | list) | difference(network_info | map(attribute='Name') | list) | sort }}"
  loop_control:
    index_var: idx
    label: "Creating network {{ item }}"

- name: Create base directory
  become: true
  file:
    path: "{{ docker_base_path }}"
    state: directory
    owner: "{{ common_uid }}"
    group: "{{ common_gid }}"
    mode: "{{ default_file_permission_mode }}"

- name: Template common.env file
  become: true
  template:
    src: "{{ ansible_home }}/roles/0docker_setup/templates/common.env.j2"
    dest: "{{ docker_base_path }}/common.env"