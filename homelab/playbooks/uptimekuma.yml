---
- hosts: localhost
  roles:
    - variables
  vars:
    uptime_kuma_api_url: "https://uptime.sauna.re"
    monitor_type: "HTTP"
  tasks:

    - name: Gather information about all docker hosts
      lucasheld.uptime_kuma.docker_host_info:
        api_url: "{{ uptime_kuma_api_url }}"
      register: existing_docker_hosts

    - name: Generate list of existing docker host names
      set_fact:
        existing_docker_host_names: "{{ existing_docker_hosts.docker_hosts | map(attribute='name') | list }}"

    - name: Add docker host
      lucasheld.uptime_kuma.docker_host:
        api_url: "{{ uptime_kuma_api_url }}"
        name: "{{ item.key | upper }}"
        dockerType: "{{ item.value.docker_connection.type }}"
        dockerDaemon: "{{ item.value.docker_connection.path }}"
      loop: "{{ lookup('dict', endpoint_hosts) }}"
      when: 
        - item.value.docker_connection is defined
        - item.key | upper not in existing_docker_host_names

    - name: Remove docker host
      lucasheld.uptime_kuma.docker_host:
        api_url: "{{ uptime_kuma_api_url }}"
        name: "{{ item.key | upper }}"
        state: absent
      loop: "{{ lookup('dict', endpoint_hosts) }}"
      when: 
        - item.value.docker_connection is not defined
        - item.key | upper in existing_docker_host_names

    - name: Generate the monitor list from the endpoints
      set_fact:
        defined_monitor_list: >-
          [
            {% for host, details in endpoint_hosts.items() %}
              {% if details.uptimekuma_monitoring is not defined or details.uptimekuma_monitoring != false %}
                {"name": "{{ host | upper }}", "type": "group"},
                {% for ip in details.ip %}
                  {"name": "0 PING ({{ ip }})", "parent_host": "{{ host | upper }}", "ip": "{{ ip }}", "type": "ping"},
                  {% if details.open_ports is defined %}
                    {% for port in details.open_ports %}
                      {"name": "0 PORT {{ port }} ({{ ip }})", "parent_host": "{{ host | upper }}", "ip": "{{ ip }}", "port": "{{ port }}", "type": "port"},
                    {% endfor %}
                  {% endif %}
                  {% if details.dns is defined and details.dns == true %}
                    {"name": "{{ host | upper }} DNS", "parent_host": "{{ host | upper }}", "dns_resolve_server": "{{ ip }}", "ip": "google.com", "type": "dns"},
                  {% endif %}
                {% endfor %}
              {% endif %}
            {% endfor %}
            {% for service, details in endpoints.items() %}
              {% if details.uptimekuma_monitoring is not defined or details.uptimekuma_monitoring != false %}
                {% for host, url in details.items() if details is mapping %}
                  {% if host in endpoint_hosts %}
                    {% if url is string %}
                      {"name": "{{ service | capitalize }} HTTP ({{ host | upper }})", "parent_host": "{{ host | upper }}", "url": "https://{{ url }}", "type": "http"},
                    {% elif url is iterable %}
                      {% for u in url %}
                        {"name": "{{ service | capitalize }}{% if loop.index > 1 %} {{ loop.index }}{% endif %} HTTP ({{ host | upper }})", "parent_host": "{{ host | upper }}", "url": "https://{{ u }}", "type": "http"},
                      {% endfor %}
                    {% endif %}
                  {% endif %}
                {% endfor %}
                {% if details.uptimekuma_container is defined %}
                  {% for container, container_details in details.uptimekuma_container.items() %}
                    {"name": "{{ container | capitalize }} CONTAINER ({{ container_details.docker_connection_host | upper }})", "parent_host": "{{ container_details.docker_connection_host | upper }}", "docker_container": "{{ container }}", "docker_host_name": "{{ container_details.docker_connection_host | upper }}", "type": "docker"},
                  {% endfor %}
                {% endif %}
              {% endif %}
            {% endfor %}
          ]

    - name: Debug defined_monitor_list
      debug:
        var: defined_monitor_list

    - name: Get all monitors setup in UptimeKuma
      lucasheld.uptime_kuma.monitor_info:
        api_url: "{{ uptime_kuma_api_url }}"
      register: existing_monitors

    # - name: Debug existing_monitors
    #   debug:
    #     var: existing_monitors

    - name: Find common entries in monitor_list and existing_monitors
      set_fact:
        common_entries: >-
          {%- set result = [] -%}
          {%- for new_monitor in defined_monitor_list -%}
            {%- for existing_monitor in existing_monitors.monitors -%}
              {%- if new_monitor.name == existing_monitor.name and new_monitor.type == existing_monitor.type -%}
                {%- if new_monitor.type == 'http' and new_monitor.url == existing_monitor.url -%}
                  {%- set _ = result.append(new_monitor) -%}
                {%- endif -%}
                {%- if new_monitor.type == 'ping' and new_monitor.ip == existing_monitor.hostname -%}
                  {%- set _ = result.append(new_monitor) -%}
                {%- endif -%}
                {%- if new_monitor.type == 'port' and new_monitor.ip == existing_monitor.hostname and new_monitor.port | string == existing_monitor.port | string -%}
                  {%- set _ = result.append(new_monitor) -%}
                {%- endif -%}
                {%- if new_monitor.type == 'docker' and new_monitor.docker_container == existing_monitor.docker_container -%}
                  {%- set _ = result.append(new_monitor) -%}
                {%- endif -%}
                {%- if new_monitor.type == 'group' -%}
                  {%- set _ = result.append(new_monitor) -%}
                {%- endif -%}
                {%- if new_monitor.type == 'dns' and new_monitor.ip == existing_monitor.hostname and new_monitor.dns_resolve_server == existing_monitor.dns_resolve_server -%}
                  {%- set _ = result.append(new_monitor) -%}
                {%- endif -%}
              {%- endif -%}
            {%- endfor -%}
          {%- endfor -%}
          {{ result }}

    # - name: Debug common_entries
    #   debug:
    #     var: common_entries

    - name: Create missing monitors
      lucasheld.uptime_kuma.monitor:
        api_url: "{{ uptime_kuma_api_url }}"
        name: "{{ item.name }}"
        type: "{{ item.type }}"
        parent_name: "{{ item.parent_host | default(omit) }}"
        hostname: "{{ item.ip | default(omit) }}"
        port: "{{ item.port | default(omit) }}"
        url: "{{ item.url | default(omit) }}"
        dns_resolve_server: "{{ item.dns_resolve_server if item.type == 'dns' else omit }}"
        docker_container: "{{ item.docker_container if item.docker_container is defined else omit }}"
        docker_host_name: "{{ item.docker_host_name if item.docker_host_name is defined else omit }}"
        interval: "60"
        maxretries: "5"
        state: present
      loop: "{{ defined_monitor_list }}"
      when: "item not in common_entries"

    - name: Delete undefined monitors
      lucasheld.uptime_kuma.monitor:
        api_url: "{{ uptime_kuma_api_url }}"
        name: "{{ item.name }}"
        type: "{{ item.type }}"
        state: absent
      loop: "{{ existing_monitors.monitors }}"
      when: >-
        defined_monitor_list | selectattr('name', 'equalto', item.name) | selectattr('type', 'equalto', item.type) | list | length == 0 and
        'manual' not in item.tags|map(attribute='name')|list

    - name: Add notification
      lucasheld.uptime_kuma.notification:
        api_url: "{{ uptime_kuma_api_url }}"
        name: "Homeassistant"
        type: "HomeAssistant"
        isDefault: false
        applyExisting: false
        homeAssistantUrl: "https://home.sauna.re"
        longLivedAccessToken: "dwadwa"
        state: present

    # - name: Get all monitors setup in UptimeKuma
    #   lucasheld.uptime_kuma.monitor_info:
    #     api_url: "{{ uptime_kuma_api_url }}"
    #     name: "push"
    #   register: pushmonitor

    # - name: Debug pushmonitor
    #   debug:
    #     var: pushmonitor

    # - name: Add a push monitor
    #   lucasheld.uptime_kuma.monitor:
    #     api_url: "{{ uptime_kuma_api_url }}"
    #     type: push
    #     name: Push
    #     state: present
