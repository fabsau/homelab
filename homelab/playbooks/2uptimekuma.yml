---
- hosts: localhost
  roles:
    - variables
  vars:
    uptime_kuma_api_url: "https://uptime.sauna.re"
    uptime_kuma_username: "admin"
    uptime_kuma_password: "XUQ8XSzKxi2rC2MG9o3D"
    delete_all: true
    
    # Define subgroup names per host to avoid naming collisions
    kuma_subgroups:
      basic: "BASIC"
      http: "HTTP"
      containers: "CONTAINERS"

  tasks:
    - name: Login to Uptime Kuma and retrieve API token
      lucasheld.uptime_kuma.login:
        api_url: "{{ uptime_kuma_api_url }}"
        api_username: "{{ uptime_kuma_username }}"
        api_password: "{{ uptime_kuma_password }}"
      register: login_result

    - name: Set API token as fact
      set_fact:
        uptime_kuma_api_token: "{{ login_result.token }}"

    - name: Retrieve all monitors
      lucasheld.uptime_kuma.monitor_info:
        api_url: "{{ uptime_kuma_api_url }}"
        api_token: "{{ uptime_kuma_api_token }}"
      register: monitor_info_result
      when: delete_all

    - name: Delete all monitors if delete_all is true
      lucasheld.uptime_kuma.monitor:
        api_url: "{{ uptime_kuma_api_url }}"
        api_token: "{{ uptime_kuma_api_token }}"
        name: "{{ item.name }}"
        type: "{{ item.type }}"
        state: absent
      loop: "{{ monitor_info_result.monitors }}"
      when: delete_all

    - name: Gather information about existing Docker hosts in Uptime Kuma
      lucasheld.uptime_kuma.docker_host_info:
        api_url: "{{ uptime_kuma_api_url }}"
        api_token: "{{ uptime_kuma_api_token }}"
      register: existing_docker_hosts

    - name: Generate list of existing Docker host names
      set_fact:
        existing_docker_host_names: >
          {{ existing_docker_hosts.docker_hosts
             | map(attribute='name')
             | list
          }}

    - name: Add defined Docker hosts that do not exist
      lucasheld.uptime_kuma.docker_host:
        api_url: "{{ uptime_kuma_api_url }}"
        api_token: "{{ uptime_kuma_api_token }}"
        name: "{{ item.key | upper }}"
        dockerType: "{{ item.value.docker_connection.type }}"
        dockerDaemon: "{{ item.value.docker_connection.path }}"
      loop: "{{ lookup('dict', endpoint_hosts) }}"
      when:
        - item.value.docker_connection is defined
        - (item.key | upper) not in existing_docker_host_names

    - name: Remove Docker hosts that should no longer exist
      lucasheld.uptime_kuma.docker_host:
        api_url: "{{ uptime_kuma_api_url }}"
        api_token: "{{ uptime_kuma_api_token }}"
        name: "{{ item.key | upper }}"
        state: absent
      loop: "{{ lookup('dict', endpoint_hosts) }}"
      when:
        - item.value.docker_connection is not defined
        - (item.key | upper) in existing_docker_host_names

    # ----------------------------------------------------------------------------
    # 1) Build a final "complete_monitor_list" that includes:
    #    - Main (top-level) Group for each host
    #    - Conditional subgroups for BASIC, HTTP, CONTAINERS
    #    - Individual monitors nested under the relevant subgroups
    # ----------------------------------------------------------------------------

    - name: Build full monitor list (groups, subgroups, and individual checks)
      set_fact:
        complete_monitor_list: >-
          {% set all = [] %}
          {%- for host_key, host_details in endpoint_hosts.items() %}
            {# Create the top-level group for the host #}
            {%- set parent_group = {
              "name": host_key | upper,
              "type": "group"
            } -%}
            {%- set _ = all.append(parent_group) -%}

            {# Check which subgroups are required for this host #}
            {%- set has_basic = host_details.uptimekuma_basic_monitoring | default(false) %}
            {%- set has_http = host_details.uptimekuma_http_monitoring | default(false) %}
            {%- set has_container = host_details.uptimekuma_container_monitoring | default(false) %}

            {# Add BASIC monitors if required #}
            {%- if has_basic %}
              {# Define the BASIC subgroup first #}
              {%- set _ = all.append({
                "name": kuma_subgroups.basic,
                "type": "group",
                "parent_name": parent_group.name
              }) -%}

              {%- for ip in host_details.ip | default([]) %}
                {%- set _ = all.append({
                      "name": "PING (" ~ ip ~ ")",
                      "type": "ping",
                      "hostname": ip,
                      "parent_name": kuma_subgroups.basic
                    }) -%}

                {%- if host_details.open_ports is defined %}
                  {%- for port in host_details.open_ports %}
                    {%- set _ = all.append({
                      "name": "PORT " ~ port | string ~ " (" ~ ip ~ ")",
                      "type": "port",
                      "hostname": ip,
                      "port": port,
                      "parent_name": kuma_subgroups.basic
                    }) -%}
                  {%- endfor %}
                {%- endif %}

                {%- if host_details.dns is defined and host_details.dns %}
                  {%- set _ = all.append({
                    "name": "DNS (" ~ ip ~ ")",
                    "type": "dns",
                    "hostname": "google.com",
                    "dns_resolve_server": ip,
                    "parent_name": kuma_subgroups.basic
                  }) -%}
                {%- endif %}
              {%- endfor %}
            {%- endif %}

            {# Add HTTP monitors if required #}
            {%- if has_http %}
              {# Define the HTTP subgroup first #}
              {%- set _ = all.append({
                "name": kuma_subgroups.http,
                "type": "group",
                "parent_name": parent_group.name
              }) -%}

              {%- for service_name, service_details in endpoints.items() %}
                {%- if service_details.uptimekuma_monitoring is not defined or service_details.uptimekuma_monitoring != false %}
                  {%- for sub_host, urlval in service_details.items() if service_details is mapping and sub_host == host_key %}
                    {%- if urlval is string %}
                      {%- set _ = all.append({
                        "name": (service_name | capitalize) ~ " HTTP (" ~ (host_key | upper) ~ ")",
                        "type": "http",
                        "url": "https://" ~ urlval,
                        "parent_name": kuma_subgroups.http
                      }) -%}
                    {%- elif urlval is iterable and urlval is not string %}
                      {%- for single_url in urlval %}
                        {%- set _ = all.append({
                          "name": (service_name | capitalize) ~ ( " " ~ loop.index | string if loop.index > 1 else "" ) ~ " HTTP (" ~ (host_key | upper) ~ ")",
                          "type": "http",
                          "url": "https://" ~ single_url,
                          "parent_name": kuma_subgroups.http
                        }) -%}
                      {%- endfor %}
                    {%- endif %}
                  {%- endfor %}
                {%- endif %}
              {%- endfor %}
            {%- endif %}

            {# Add CONTAINERS monitors if required #}
            {%- if has_container %}
              {# Define the CONTAINERS subgroup first #}
              {%- set _ = all.append({
                "name": kuma_subgroups.containers,
                "type": "group",
                "parent_name": parent_group.name
              }) -%}

              {%- for service_name, service_details in endpoints.items() %}
                {%- if service_details.uptimekuma_container is defined %}
                  {%- for container_name, container_defs in service_details.uptimekuma_container.items() %}
                    {%- if container_defs.docker_connection_host | lower == host_key | lower %}
                      {%- set _ = all.append({
                        "name": (container_name | capitalize) ~ " CONTAINER (" ~ (host_key | upper) ~ ")",
                        "type": "docker",
                        "docker_container": container_name,
                        "docker_host_name": host_key | upper,
                        "parent_name": kuma_subgroups.containers
                      }) -%}
                    {%- endif %}
                  {%- endfor %}
                {%- endif %}
              {%- endfor %}
            {%- endif %}
          {%- endfor %}

          {{ all | to_json }}

    - name: Debug final list of all groups/monitors to create
      debug:
        var: complete_monitor_list

    - name: Convert that JSON string into real lists/dicts
      set_fact:
        complete_monitor_list: "{{ complete_monitor_list | from_json }}"

    - name: Separate groups from monitors
      set_fact:
        group_list: "{{ complete_monitor_list | selectattr('type', 'equalto', 'group') | list }}"
        monitor_list: "{{ complete_monitor_list | rejectattr('type', 'equalto', 'group') | list }}"

    - name: Debug group list
      debug:
        var: group_list

    - name: Debug monitor list
      debug:
        var: monitor_list

    - name: Get all monitors currently set up in Uptime Kuma
      lucasheld.uptime_kuma.monitor_info:
        api_url: "{{ uptime_kuma_api_url }}"
        api_token: "{{ uptime_kuma_api_token }}"
      register: existing_monitors

    - name: Debug all monitors currently set up in Uptime Kuma
      debug:
        var: existing_monitors

    # ----------------------------------------------------------------------------
    # 2) Find common entries that already exist
    # ----------------------------------------------------------------------------

    - name: Find which of our newly-defined monitors already exist
      set_fact:
        common_entries: >-
          {%- set result = [] -%}
          {%- for new_monitor in complete_monitor_list -%}
            {%- for existing_monitor in existing_monitors.monitors -%}
              {# Match by name + type (and more as needed) #}
              {%- if new_monitor.name == existing_monitor.name and new_monitor.type == existing_monitor.type -%}
                {%- if new_monitor.type == 'http' and new_monitor.url == existing_monitor.url -%}
                  {%- set _ = result.append(new_monitor) -%}
                {%- elif new_monitor.type == 'ping' and new_monitor.hostname == existing_monitor.hostname -%}
                  {%- set _ = result.append(new_monitor) -%}
                {%- elif new_monitor.type == 'port' and new_monitor.hostname == existing_monitor.hostname and (new_monitor.port|string) == (existing_monitor.port|string) -%}
                  {%- set _ = result.append(new_monitor) -%}
                {%- elif new_monitor.type == 'docker' and new_monitor.docker_container == existing_monitor.docker_container -%}
                  {%- set _ = result.append(new_monitor) -%}
                {%- elif new_monitor.type == 'dns' and new_monitor.hostname == existing_monitor.hostname and new_monitor.dns_resolve_server == existing_monitor.dns_resolve_server -%}
                  {%- set _ = result.append(new_monitor) -%}
                {%- elif new_monitor.type == 'group' -%}
                  {%- set _ = result.append(new_monitor) -%}
                {%- endif -%}
              {%- endif -%}
            {%- endfor -%}
          {%- endfor -%}
          {{ result }}

    # ----------------------------------------------------------------------------
    # 3) Create any new groups
    # ----------------------------------------------------------------------------

    - name: Create missing groups
      lucasheld.uptime_kuma.monitor:
        api_url: "{{ uptime_kuma_api_url }}"
        api_token: "{{ uptime_kuma_api_token }}"
        name: "{{ item.name }}"
        type: "{{ item.type }}"
        parent_name: "{{ item.parent_name | default(omit) }}"
        interval: 60
        maxretries: 5
        state: present
      loop: "{{ group_list }}"
      when: >
        (existing_monitors.monitors
            | selectattr('name', 'equalto', item.name)
            | selectattr('type', 'equalto', item.type)
            | list
        ) | length == 0

    # ----------------------------------------------------------------------------
    # 4) Create any new monitors
    # ----------------------------------------------------------------------------

    - name: Create missing monitors
      lucasheld.uptime_kuma.monitor:
        api_url: "{{ uptime_kuma_api_url }}"
        api_token: "{{ uptime_kuma_api_token }}"
        name: "{{ item.name }}"
        type: "{{ item.type }}"
        parent_name: "{{ item.parent_name | default(omit) }}"
        hostname: "{{ item.hostname | default(omit) }}"
        port: "{{ item.port | default(omit) }}"
        url: "{{ item.url | default(omit) }}"
        dns_resolve_server: "{{ item.dns_resolve_server | default(omit) }}"
        docker_container: "{{ item.docker_container | default(omit) }}"
        docker_host_name: "{{ item.docker_host_name | default(omit) }}"
        interval: 60
        maxretries: 5
        state: present
      loop: "{{ monitor_list }}"
      when: >
        (existing_monitors.monitors
            | selectattr('name', 'equalto', item.name)
            | selectattr('type', 'equalto', item.type)
            | list
        ) | length == 0

    # ----------------------------------------------------------------------------
    # 5) Remove any obsolete monitors
    # ----------------------------------------------------------------------------

    - name: Delete monitors that are no longer defined
      lucasheld.uptime_kuma.monitor:
        api_url: "{{ uptime_kuma_api_url }}"
        api_token: "{{ uptime_kuma_api_token }}"
        name: "{{ item.name }}"
        type: "{{ item.type }}"
        state: absent
      loop: "{{ existing_monitors.monitors }}"
      when: >
        (complete_monitor_list
         | selectattr('name','equalto', item.name)
         | selectattr('type','equalto', item.type)
         | list
         | length == 0)
        and
        ('manual' not in (item.tags | map(attribute='name') | list))